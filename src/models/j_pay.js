"use strict";
module.exports = (sequelize, DataTypes) => {
  const j_pay = sequelize.define(
    "j_pay",
    {
      j_id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: DataTypes.INTEGER,
      },
      j_user_id: DataTypes.STRING,
      j_reciepient_id: DataTypes.STRING,
      j_sender_id: DataTypes.STRING,
      j_referrer_id: DataTypes.STRING,
      j_bonus: DataTypes.DOUBLE,
      j_transact_id: DataTypes.STRING,
      j_property_sub_id: DataTypes.STRING,
      j_property_id: DataTypes.STRING,
      j_plan_id: DataTypes.STRING,
      j_plan_id: DataTypes.STRING,
      j_plan: DataTypes.STRING,
      j_plan_amount: DataTypes.DOUBLE,
      j_durations_sm: DataTypes.DOUBLE,
      j_interest_d: DataTypes.DOUBLE,
      j_interest_amount_d: DataTypes.DOUBLE,
      j_next_pay_date: DataTypes.DATE,
      j_profit: DataTypes.DOUBLE,
      j_period: DataTypes.STRING,
      j_reserve_id: DataTypes.STRING,
      j_layers: DataTypes.STRING,
      j_purchased_date: DataTypes.DATE,
      j_ref: DataTypes.STRING,
      j_refund_id: DataTypes.STRING,
      j_gateway: {
        type: DataTypes.ENUM("PAYSTACK", "BANK TRANSFER", "WALLET", "CASH"),
      },
      j_currency: DataTypes.STRING,
      j_amount: DataTypes.DOUBLE,
      j_sms_unit: DataTypes.DOUBLE,
      j_package: DataTypes.STRING,
      j_bal: DataTypes.DOUBLE,
      j_coupon: DataTypes.STRING,
      j_bal_coupon: DataTypes.DOUBLE,
      j_date: DataTypes.DATE,
      j_blank_num: DataTypes.STRING,
      j_bank_code: DataTypes.STRING,
      j_bank: DataTypes.STRING,
      j_account_no: DataTypes.STRING,
      j_biller_code: DataTypes.STRING,
      j_item_code: DataTypes.STRING,
      j_network_name: DataTypes.STRING,
      j_phone: DataTypes.STRING,
      j_status: DataTypes.STRING,
      j_msg: DataTypes.STRING,
      j_paid: DataTypes.INTEGER,
      j_disburse: DataTypes.INTEGER,
      j_t_recipient_code: DataTypes.STRING,
      j_t_transfer_code: DataTypes.STRING,
      j_type: { type: DataTypes.ENUM("CREDIT", "DEBIT") },
      j_kind: {
        type: DataTypes.ENUM(
          "TOP-UP",
          "INVESTMENT",
          "PROPERTY-BUY",
          "MATERIAL",
          "HOUSING",
          "A-CREDIT",
          "REFERRAL-BONUS"
        ),
      },
      j_desc: DataTypes.STRING,
      j_duration: DataTypes.STRING,
      j_interest: DataTypes.DOUBLE,
      j_interest_amount: DataTypes.DOUBLE,
      j_roi: {
        type: DataTypes.DOUBLE,
      },
      j_total: DataTypes.DOUBLE,
      j_end_date: DataTypes.DATE,
      j_crypto: DataTypes.STRING,
      j_crypto_address: DataTypes.STRING,
      j_amount_crypto: DataTypes.DOUBLE,
      j_profit_crypto: DataTypes.DOUBLE,
      j_processing_fee_crypto: DataTypes.DOUBLE,
      j_total_debit_crypto: DataTypes.DOUBLE,
      j_amount_ngn: DataTypes.DOUBLE,
      j_processing_fee_ngn: DataTypes.DOUBLE,
      j_profit_ngn: DataTypes.DOUBLE,
      j_total_charge_ngn: DataTypes.DOUBLE,
      j_total_debit_ngn: DataTypes.DOUBLE,
      j_amount_usd: DataTypes.DOUBLE,
      j_processing_fee_usd: DataTypes.DOUBLE,
      j_profit_usd: DataTypes.DOUBLE,
      j_total_charge_usd: DataTypes.DOUBLE,
      j_total_debit_usd: DataTypes.DOUBLE,
      j_proof: DataTypes.STRING,
      j_ip: DataTypes.STRING,
      j_deleted: DataTypes.INTEGER,
    },
    {}
  );
  j_pay.associate = function (models) {
    // associations can be defined here
  };
  return j_pay;
};
